{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\NARESH THANURI\\\\OneDrive\\\\Desktop\\\\Reactjs\\\\src\\\\example.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst contacts = [{\n  name: \"John Doe\",\n  mobile: \"1234567890\",\n  email: \"john@example.com\",\n  gender: \"male\"\n}, {\n  name: \"Jane Smith\",\n  mobile: \"0987654321\",\n  email: \"jane@example.com\",\n  gender: \"female\"\n}, {\n  name: \"Michael Johnson\",\n  mobile: \"3456789012\",\n  email: \"michael@example.com\",\n  gender: \"male\"\n}, {\n  name: \"Emily Davis\",\n  mobile: \"5678901234\",\n  email: \"emily@example.com\",\n  gender: \"female\"\n}, {\n  name: \"David Brown\",\n  mobile: \"7890123456\",\n  email: \"david@example.com\",\n  gender: \"male\"\n}];\n\nconst Example = () => {\n  _s();\n\n  const [state, setState] = useState({\n    columns: ['Sno', 'Name', 'Mobile Number', 'Email', 'Gender'],\n    rowData: []\n  });\n  useEffect(() => {\n    setState(prevState => ({ ...prevState,\n      rowData: contacts\n    }));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: state.columns.map((column, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: column\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: state.rowData.map((contact, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: index + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: contact.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: contact.mobile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: contact.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: contact.gender\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Example, \"WzW2/Pi57daKtpJPnVq+t1hqCb4=\");\n\n_c = Example;\nexport default Example;\n\nvar _c;\n\n$RefreshReg$(_c, \"Example\");","map":{"version":3,"names":["React","useEffect","useState","contacts","name","mobile","email","gender","Example","state","setState","columns","rowData","prevState","map","column","index","contact"],"sources":["C:/Users/NARESH THANURI/OneDrive/Desktop/Reactjs/src/example.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst contacts = [\r\n    {\r\n        name: \"John Doe\",\r\n        mobile: \"1234567890\",\r\n        email: \"john@example.com\",\r\n        gender: \"male\"\r\n    },\r\n    {\r\n        name: \"Jane Smith\",\r\n        mobile: \"0987654321\",\r\n        email: \"jane@example.com\",\r\n        gender: \"female\"\r\n    },\r\n    {\r\n        name: \"Michael Johnson\",\r\n        mobile: \"3456789012\",\r\n        email: \"michael@example.com\",\r\n        gender: \"male\"\r\n    },\r\n    {\r\n        name: \"Emily Davis\",\r\n        mobile: \"5678901234\",\r\n        email: \"emily@example.com\",\r\n        gender: \"female\"\r\n    },\r\n    {\r\n        name: \"David Brown\",\r\n        mobile: \"7890123456\",\r\n        email: \"david@example.com\",\r\n        gender: \"male\"\r\n    }\r\n];\r\n\r\nconst Example = () => {\r\n\r\n    const [state, setState] = useState({\r\n        columns: ['Sno', 'Name', 'Mobile Number', 'Email', 'Gender'],\r\n        rowData: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        setState(prevState => ({ ...prevState, rowData: contacts }))\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        {state.columns.map((column, index) => (\r\n                            <th key={index} scope=\"col\">{column}</th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {state.rowData.map((contact, index) => (\r\n                        <tr key={index}>\r\n                            <td>{index + 1}</td>\r\n                            <td>{contact.name}</td>\r\n                            <td>{contact.mobile}</td>\r\n                            <td>{contact.email}</td>\r\n                            <td>{contact.gender}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Example;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,MAAMC,QAAQ,GAAG,CACb;EACIC,IAAI,EAAE,UADV;EAEIC,MAAM,EAAE,YAFZ;EAGIC,KAAK,EAAE,kBAHX;EAIIC,MAAM,EAAE;AAJZ,CADa,EAOb;EACIH,IAAI,EAAE,YADV;EAEIC,MAAM,EAAE,YAFZ;EAGIC,KAAK,EAAE,kBAHX;EAIIC,MAAM,EAAE;AAJZ,CAPa,EAab;EACIH,IAAI,EAAE,iBADV;EAEIC,MAAM,EAAE,YAFZ;EAGIC,KAAK,EAAE,qBAHX;EAIIC,MAAM,EAAE;AAJZ,CAba,EAmBb;EACIH,IAAI,EAAE,aADV;EAEIC,MAAM,EAAE,YAFZ;EAGIC,KAAK,EAAE,mBAHX;EAIIC,MAAM,EAAE;AAJZ,CAnBa,EAyBb;EACIH,IAAI,EAAE,aADV;EAEIC,MAAM,EAAE,YAFZ;EAGIC,KAAK,EAAE,mBAHX;EAIIC,MAAM,EAAE;AAJZ,CAzBa,CAAjB;;AAiCA,MAAMC,OAAO,GAAG,MAAM;EAAA;;EAElB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC;IAC/BS,OAAO,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,eAAhB,EAAiC,OAAjC,EAA0C,QAA1C,CADsB;IAE/BC,OAAO,EAAE;EAFsB,CAAD,CAAlC;EAKAX,SAAS,CAAC,MAAM;IACZS,QAAQ,CAACG,SAAS,KAAK,EAAE,GAAGA,SAAL;MAAgBD,OAAO,EAAET;IAAzB,CAAL,CAAV,CAAR;EACH,CAFQ,EAEN,EAFM,CAAT;EAIA,oBACI;IAAA,uBACI;MAAO,SAAS,EAAC,OAAjB;MAAA,wBACI;QAAA,uBACI;UAAA,UACKM,KAAK,CAACE,OAAN,CAAcG,GAAd,CAAkB,CAACC,MAAD,EAASC,KAAT,kBACf;YAAgB,KAAK,EAAC,KAAtB;YAAA,UAA6BD;UAA7B,GAASC,KAAT;YAAA;YAAA;YAAA;UAAA,QADH;QADL;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QADJ,eAQI;QAAA,UACKP,KAAK,CAACG,OAAN,CAAcE,GAAd,CAAkB,CAACG,OAAD,EAAUD,KAAV,kBACf;UAAA,wBACI;YAAA,UAAKA,KAAK,GAAG;UAAb;YAAA;YAAA;YAAA;UAAA,QADJ,eAEI;YAAA,UAAKC,OAAO,CAACb;UAAb;YAAA;YAAA;YAAA;UAAA,QAFJ,eAGI;YAAA,UAAKa,OAAO,CAACZ;UAAb;YAAA;YAAA;YAAA;UAAA,QAHJ,eAII;YAAA,UAAKY,OAAO,CAACX;UAAb;YAAA;YAAA;YAAA;UAAA,QAJJ,eAKI;YAAA,UAAKW,OAAO,CAACV;UAAb;YAAA;YAAA;YAAA;UAAA,QALJ;QAAA,GAASS,KAAT;UAAA;UAAA;UAAA;QAAA,QADH;MADL;QAAA;QAAA;QAAA;MAAA,QARJ;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ,iBADJ;AAwBH,CAnCD;;GAAMR,O;;KAAAA,O;AAqCN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}