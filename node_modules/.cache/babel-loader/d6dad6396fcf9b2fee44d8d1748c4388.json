{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\NARESH THANURI\\\\OneDrive\\\\Desktop\\\\Reactjs\\\\src\\\\Example3.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Example3 = () => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [displayedData, setDisplayedData] = useState([]);\n  const [currentBatch, setCurrentBatch] = useState(0);\n  useEffect(() => {\n    const fetchPosts = () => {\n      axios.get('https://jsonplaceholder.typicode.com/posts').then(response => {\n        setData(response.data);\n      }).catch(error => {\n        console.error('Error fetching posts:', error);\n      });\n    }; // Initial fetch on component mount\n\n\n    fetchPosts(); // Interval to update displayedData every 2 seconds\n\n    const interval = setInterval(() => {\n      if (currentBatch * 20 < data.length) {\n        // Calculate the next batch of 20 records\n        const newDataSlice = data.slice(currentBatch * 20, (currentBatch + 1) * 20);\n        setDisplayedData(newDataSlice);\n        setCurrentBatch(prevBatch => prevBatch + 1);\n      } else {\n        clearInterval(interval); // Stop interval if no more data to display\n      }\n    }, 2000); // Clean up interval on component unmount or when all data is displayed\n\n    return () => clearInterval(interval);\n  }, [currentBatch, data]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: displayedData.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: item.title\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};\n\n_s(Example3, \"gMPBw9T40oaXelThNWmTAtVniNY=\");\n\n_c = Example3;\nexport default Example3;\n\nvar _c;\n\n$RefreshReg$(_c, \"Example3\");","map":{"version":3,"names":["React","useEffect","useState","axios","Example3","data","setData","displayedData","setDisplayedData","currentBatch","setCurrentBatch","fetchPosts","get","then","response","catch","error","console","interval","setInterval","length","newDataSlice","slice","prevBatch","clearInterval","map","item","index","title"],"sources":["C:/Users/NARESH THANURI/OneDrive/Desktop/Reactjs/src/Example3.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst Example3 = () => {\r\n  const [data, setData] = useState([]);\r\n  const [displayedData, setDisplayedData] = useState([]);\r\n  const [currentBatch, setCurrentBatch] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = () => {\r\n      axios.get('https://jsonplaceholder.typicode.com/posts')\r\n        .then(response => {\r\n          setData(response.data);\r\n        })\r\n        .catch(error => {\r\n          console.error('Error fetching posts:', error);\r\n        });\r\n    };\r\n\r\n    // Initial fetch on component mount\r\n    fetchPosts();\r\n\r\n    // Interval to update displayedData every 2 seconds\r\n    const interval = setInterval(() => {\r\n      if (currentBatch * 20 < data.length) {\r\n        // Calculate the next batch of 20 records\r\n        const newDataSlice = data.slice(currentBatch * 20, (currentBatch + 1) * 20);\r\n        setDisplayedData(newDataSlice);\r\n        setCurrentBatch(prevBatch => prevBatch + 1);\r\n      } else {\r\n        clearInterval(interval); // Stop interval if no more data to display\r\n      }\r\n    }, 2000);\r\n\r\n    // Clean up interval on component unmount or when all data is displayed\r\n    return () => clearInterval(interval);\r\n  }, [currentBatch, data]);\r\n\r\n  return (\r\n    <>\r\n      {displayedData.map((item, index) => (\r\n        <div key={index}>{item.title}</div>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Example3;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EACrB,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,EAAD,CAAlD;EACA,MAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,CAAD,CAAhD;EAEAD,SAAS,CAAC,MAAM;IACd,MAAMU,UAAU,GAAG,MAAM;MACvBR,KAAK,CAACS,GAAN,CAAU,4CAAV,EACGC,IADH,CACQC,QAAQ,IAAI;QAChBR,OAAO,CAACQ,QAAQ,CAACT,IAAV,CAAP;MACD,CAHH,EAIGU,KAJH,CAISC,KAAK,IAAI;QACdC,OAAO,CAACD,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;MACD,CANH;IAOD,CARD,CADc,CAWd;;;IACAL,UAAU,GAZI,CAcd;;IACA,MAAMO,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjC,IAAIV,YAAY,GAAG,EAAf,GAAoBJ,IAAI,CAACe,MAA7B,EAAqC;QACnC;QACA,MAAMC,YAAY,GAAGhB,IAAI,CAACiB,KAAL,CAAWb,YAAY,GAAG,EAA1B,EAA8B,CAACA,YAAY,GAAG,CAAhB,IAAqB,EAAnD,CAArB;QACAD,gBAAgB,CAACa,YAAD,CAAhB;QACAX,eAAe,CAACa,SAAS,IAAIA,SAAS,GAAG,CAA1B,CAAf;MACD,CALD,MAKO;QACLC,aAAa,CAACN,QAAD,CAAb,CADK,CACoB;MAC1B;IACF,CAT2B,EASzB,IATyB,CAA5B,CAfc,CA0Bd;;IACA,OAAO,MAAMM,aAAa,CAACN,QAAD,CAA1B;EACD,CA5BQ,EA4BN,CAACT,YAAD,EAAeJ,IAAf,CA5BM,CAAT;EA8BA,oBACE;IAAA,UACGE,aAAa,CAACkB,GAAd,CAAkB,CAACC,IAAD,EAAOC,KAAP,kBACjB;MAAA,UAAkBD,IAAI,CAACE;IAAvB,GAAUD,KAAV;MAAA;MAAA;MAAA;IAAA,QADD;EADH,iBADF;AAOD,CA1CD;;GAAMvB,Q;;KAAAA,Q;AA4CN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}